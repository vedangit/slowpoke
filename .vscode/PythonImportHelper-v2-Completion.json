[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "monitor",
        "importPath": "slowpoke",
        "description": "slowpoke",
        "isExtraImport": true,
        "detail": "slowpoke",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "get_config",
        "importPath": "slowpoke.config",
        "description": "slowpoke.config",
        "isExtraImport": true,
        "detail": "slowpoke.config",
        "documentation": {}
    },
    {
        "label": "monitor",
        "importPath": "slowpoke.core",
        "description": "slowpoke.core",
        "isExtraImport": true,
        "detail": "slowpoke.core",
        "documentation": {}
    },
    {
        "label": "log_slow_request",
        "importPath": "slowpoke.logger",
        "description": "slowpoke.logger",
        "isExtraImport": true,
        "detail": "slowpoke.logger",
        "documentation": {}
    },
    {
        "label": "fast",
        "kind": 2,
        "importPath": "examples.app",
        "description": "examples.app",
        "peekOfCode": "def fast():\n    return \"Fast route\"\n@app.route(\"/slow\")\ndef slow():\n    import time; time.sleep(1.5)\n    return \"Slow route\"\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "examples.app",
        "documentation": {}
    },
    {
        "label": "slow",
        "kind": 2,
        "importPath": "examples.app",
        "description": "examples.app",
        "peekOfCode": "def slow():\n    import time; time.sleep(1.5)\n    return \"Slow route\"\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "examples.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "examples.app",
        "description": "examples.app",
        "peekOfCode": "app = Flask(__name__)\nmonitor(app)\n@app.route(\"/\")\ndef fast():\n    return \"Fast route\"\n@app.route(\"/slow\")\ndef slow():\n    import time; time.sleep(1.5)\n    return \"Slow route\"\nif __name__ == \"__main__\":",
        "detail": "examples.app",
        "documentation": {}
    },
    {
        "label": "report",
        "kind": 2,
        "importPath": "slowpoke.cli",
        "description": "slowpoke.cli",
        "peekOfCode": "def report():\n    try:\n        with open(LOG_FILE, \"r\") as f:\n            logs = f.readlines()\n            if not logs:\n                print(\"No slow requests logged yet.\")\n            for line in logs:\n                print(line.strip())\n    except FileNotFoundError:\n        print(\"Log file not found.\")",
        "detail": "slowpoke.cli",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "slowpoke.cli",
        "description": "slowpoke.cli",
        "peekOfCode": "def main():\n    if len(sys.argv) > 1 and sys.argv[1] == \"report\":\n        report()\n    else:\n        print(\"Usage: slowpoke report\")",
        "detail": "slowpoke.cli",
        "documentation": {}
    },
    {
        "label": "get_config",
        "kind": 2,
        "importPath": "slowpoke.config",
        "description": "slowpoke.config",
        "peekOfCode": "def get_config():\n    if CONFIG_FILE.exists():\n        try:\n            with open(CONFIG_FILE, \"r\") as f:\n                return json.load(f)\n        except:\n            return DEFAULT_CONFIG\n    return DEFAULT_CONFIG",
        "detail": "slowpoke.config",
        "documentation": {}
    },
    {
        "label": "CONFIG_FILE",
        "kind": 5,
        "importPath": "slowpoke.config",
        "description": "slowpoke.config",
        "peekOfCode": "CONFIG_FILE = Path.home() / \".slowpoke\" / \"config.json\"\nDEFAULT_CONFIG = {\n    \"threshold_ms\": 100\n}\ndef get_config():\n    if CONFIG_FILE.exists():\n        try:\n            with open(CONFIG_FILE, \"r\") as f:\n                return json.load(f)\n        except:",
        "detail": "slowpoke.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CONFIG",
        "kind": 5,
        "importPath": "slowpoke.config",
        "description": "slowpoke.config",
        "peekOfCode": "DEFAULT_CONFIG = {\n    \"threshold_ms\": 100\n}\ndef get_config():\n    if CONFIG_FILE.exists():\n        try:\n            with open(CONFIG_FILE, \"r\") as f:\n                return json.load(f)\n        except:\n            return DEFAULT_CONFIG",
        "detail": "slowpoke.config",
        "documentation": {}
    },
    {
        "label": "monitor",
        "kind": 2,
        "importPath": "slowpoke.core",
        "description": "slowpoke.core",
        "peekOfCode": "def monitor(app):\n    config = get_config()\n    threshold_ms = config.get(\"threshold_ms\", 100)\n    @app.before_request\n    def _before_request():\n        request._slowpoke_start= time.time()\n    @app.after_request\n    def _after_request(response):\n        start = getattr(request, '_slowpoke_start', None)\n        if start:",
        "detail": "slowpoke.core",
        "documentation": {}
    },
    {
        "label": "get_project_log_file",
        "kind": 2,
        "importPath": "slowpoke.logger",
        "description": "slowpoke.logger",
        "peekOfCode": "def get_project_log_file():\n    cwd = Path.cwd()\n    project_hash = hashlib.md5(str(cwd).encode()).hexdigest()[:8]  # short hash for uniqueness\n    project_name = cwd.name or \"default\"\n    safe_project_name = project_name.replace(\" \", \"_\").replace(\".\", \"_\")\n    log_dir = Path.home() / '.slowpoke' / 'logs' / f\"{safe_project_name}_{project_hash}\"\n    log_dir.mkdir(parents=True, exist_ok=True)\n    return log_dir / 'slowpoke.log'\nLOG_FILE = get_project_log_file()\ndef log_slow_request(request, response, duration):",
        "detail": "slowpoke.logger",
        "documentation": {}
    },
    {
        "label": "log_slow_request",
        "kind": 2,
        "importPath": "slowpoke.logger",
        "description": "slowpoke.logger",
        "peekOfCode": "def log_slow_request(request, response, duration):\n    log_entry = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"method\": request.method,\n        \"route\": request.path,\n        \"status_code\": response.status_code,\n        \"duration_ms\": round(duration, 2)\n    }\n    with open(LOG_FILE, \"a\") as f:\n        f.write(json.dumps(log_entry) + \"\\n\")",
        "detail": "slowpoke.logger",
        "documentation": {}
    },
    {
        "label": "LOG_FILE",
        "kind": 5,
        "importPath": "slowpoke.logger",
        "description": "slowpoke.logger",
        "peekOfCode": "LOG_FILE = get_project_log_file()\ndef log_slow_request(request, response, duration):\n    log_entry = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"method\": request.method,\n        \"route\": request.path,\n        \"status_code\": response.status_code,\n        \"duration_ms\": round(duration, 2)\n    }\n    with open(LOG_FILE, \"a\") as f:",
        "detail": "slowpoke.logger",
        "documentation": {}
    },
    {
        "label": "test_cli_report",
        "kind": 2,
        "importPath": "tests.test_cli",
        "description": "tests.test_cli",
        "peekOfCode": "def test_cli_report(tmp_path, monkeypatch, capsys):\n    # Simulate a project directory name\n    monkeypatch.setattr(\"pathlib.Path.cwd\", lambda: tmp_path / \"fake_project\")\n    # Compute where the logger will write logs\n    log_dir = Path.home() / \".slowpoke\" / \"fake_project\" / \"logs\"\n    log_dir.mkdir(parents=True, exist_ok=True)\n    log_path = log_dir / \"slowpoke.log\"\n    # Write a dummy log entry\n    log_path.write_text('{\"method\": \"GET\", \"route\": \"/\", \"status_code\": 200, \"duration_ms\": 150}\\n')\n    from slowpoke.cli import report",
        "detail": "tests.test_cli",
        "documentation": {}
    },
    {
        "label": "test_default_config",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_default_config():\n    # Simulate config file not existing\n    with patch(\"pathlib.Path.exists\", return_value=False):\n        config = get_config()\n        assert config[\"threshold_ms\"] == 100",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_monitor_logs_slow_request",
        "kind": 2,
        "importPath": "tests.test_core",
        "description": "tests.test_core",
        "peekOfCode": "def test_monitor_logs_slow_request(tmp_path, monkeypatch):\n    # Simulate project directory name\n    monkeypatch.setattr(\"pathlib.Path.cwd\", lambda: tmp_path / \"fake_project\")\n    app = Flask(__name__)\n    monitor(app)\n    @app.route(\"/slow\")\n    def slow():\n        time.sleep(0.15)  # 150ms > 100ms default threshold\n        return \"slow response\"\n    with app.test_client() as client:",
        "detail": "tests.test_core",
        "documentation": {}
    },
    {
        "label": "test_log_slow_request",
        "kind": 2,
        "importPath": "tests.test_logger",
        "description": "tests.test_logger",
        "peekOfCode": "def test_log_slow_request(tmp_path, monkeypatch):\n    # Monkeypatch Path.cwd() to simulate a project directory\n    monkeypatch.setattr(\"pathlib.Path.cwd\", lambda: tmp_path / \"my_test_project\")\n    # Simulate a request and response\n    class DummyRequest:\n        method = \"GET\"\n        path = \"/test-route\"\n    class DummyResponse:\n        status_code = 200\n    # Call the logger",
        "detail": "tests.test_logger",
        "documentation": {}
    }
]